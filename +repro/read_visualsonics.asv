function [RF_data axial lateral fs parameters, sysParam] = read_visualsonics(filename) 
% Read IQ data from Visualsonics, and reconstruct RF from IQ data
% By Aiguo Han, Dec 22, 2014
% Modified 9.10.2015 for the numPoints issue (N/8 = Z)
% Modified 10.1.2015 to correct average multiple focal zone data.
% Also, the spectra look the same as 2013 MouseLiver, except that fs is
% different
% 2023-1-5 (CH) Setting input parameter c = c0 for consistency
% 2023-1-10 (CH) Return sysParam as a separate output to make sure all
%   acquisition parameters are stored. sysParam is just not as convenient
%   as unpacking all the parameters into a different struct as doubles


sysParam = readVSxml([filename '.iq.xml']);
num_frames = sysParam.t3D_Scan_Distance.value/sysParam.t3D_Step_Size.value;

c0 = 1e-3*str2num(sysParam.Sound_Speed_Tissue.value);  %c0 is 1540 typically

c = c0;

% read the receiver frequency and modulate by this amount
f0 = str2num(sysParam.B_Mode_RX_Frequency.value);  % 32 MHz

% read in the transmit and receive frequencies to determine the necessary
% upsampling factor, if Quad2x is enabled, the receive frequency is double
% the value listed in the xml file
RXfreq = (1 + str2num(sysParam.B_Mode_Quad_2X.value)) * f0;  % 64 MHz

%upsample_factor = 2^ceil(log2(4*TXfreq/RXfreq));
upsample_factor = 16/(1 + str2num(sysParam.B_Mode_Quad_2X.value));

% read the number of lines and number of samples per line from the system
% parameter struct
num_samples = str2num(sysParam.B_Mode_Samples.value);
num_lines = str2num(sysParam.B_Mode_Lines.value);
num_focal_zones = str2num(sysParam.B_Mode_Focal_Zones_Count.value);

% stepsize in mm between each sample (axial)
stepsize_axial = 1e3*c0/RXfreq/2;

% stepsize in mm between each line (lateral)
stepsize_lateral = str2num(sysParam.B_Mode_Width.value)/(num_lines - 1);

% depth offset converted to time offset in s
tzero = 2*str2num(sysParam.B_Mode_Depth_Offset.value)*1e-3/c0;

% define the sampling time in seconds
sdt0 = 1/RXfreq;  

% time axis in s
t = (0:upsample_factor*num_samples-1)*sdt0/upsample_factor; %+tzero;   no offset according to the official document
axial = tzero*c0/2*1e3 + t*c/2*1e3; % mm
lateral = (0:num_lines-1).*(stepsize_lateral); %mm

% open the binary file
fid = fopen([filename '.iq.bmode']);
if fid==-1
    fid = fopen([filename '.iq.3d.bmode']);
end

% read the header and discard most of it for now
header = fread(fid,40,'uint8');
% extract the number of frames within the binary file
%num_frames = header(5);
%num_frames = 1;

% create a vector of logicals to remove header information from scanned
% in data, there is a frame header of 56 bytes for each frame and a 32
% bit time stamp before each scan line, i and q data are written every
% other sample after the time stamp
non_header = repmat([false; false; true(2*num_samples, 1)], num_focal_zones*num_lines, 1);
non_header = repmat([false(28, 1); non_header], num_frames, 1);

% read the RF data and close the file
tempRF = fread(fid, 'short');    % 16 bit for short
fclose(fid);

% remove the header info with logical indexing
tempRF = tempRF(non_header); 
Idata_all = reshape(tempRF(2:2:end), [num_samples, num_focal_zones*num_lines, num_frames]);
Qdata_all = reshape(tempRF(1:2:end-1), [num_samples, num_focal_zones*num_lines, num_frames]);
clear tempRF non_header;

% data from multiple focal zones are averaged to for a single image.
Idata = zeros(num_samples, num_lines, num_frames);
Qdata = Idata;
for i = 1:num_focal_zones
    Idata = Idata + Idata_all(:, i:num_focal_zones:end,:);
    Qdata = Qdata + Qdata_all(:, i:num_focal_zones:end,:);  
end
Idata = Idata/num_focal_zones;
Qdata = Qdata/num_focal_zones;

RF_data = zeros(upsample_factor*num_samples, num_lines, num_frames);
IdataInt = zeros(upsample_factor*num_samples, num_lines, num_frames);
QdataInt = zeros(upsample_factor*num_samples, num_lines, num_frames);

% Interpolate I/Q and reconstruct RF
for j = 1:num_frames
    for i=1:num_lines
        IdataInt(:,i, j) = interp(Idata(:,i, j), upsample_factor);
        QdataInt(:,i, j) = interp(Qdata(:,i, j), upsample_factor);
        RF_data(:,i, j) = complex(IdataInt(:,i, j), QdataInt(:,i, j)) ...
            .*exp(1i*(2*pi*f0*t'-2*pi*4/16));  % the phase term does not affect the powerspectra, but the I Q switch does
    end
end
RF_data = real(RF_data);
fs = upsample_factor*RXfreq*1e-6;


parameters.yMult = 1;
parameters.yZero = 8192;
parameters.xIncr = sdt0/upsample_factor;
parameters.numPoints = num_samples*upsample_factor;
parameters.scanNum1 = num_lines;
parameters.scanNum2 = num_frames;
parameters.xZero = tzero;
parameters.step1 = stepsize_lateral*1e3;
parameters.step2 = 1000;
parameters.c = c;
parameters.depth_offset = str2double(sysParam.B_Mode_Depth_Offset.value);
parameters.f0 = str2double(sysParam.B_Mode_Ctr_Frequency.value);

end

%% Nested Load Functions
function [sysParam] = readVSxml(filename)
% readVSxml parses through the xml file which contains information about
% the system settings used for the scan.
%
%   sysParam = readVSxml(filename)
%   This parses through the given xml file and returns a structure
%   containing the system parameters.

% open the file
fid = fopen(filename);
% '2009-02-25-17-05-26_reference phantom A - sweep-2009-02-25-16-46-08_1.rfxml'

sysParam = struct();

while true
    % read the next line of text
    line = fgetl(fid);
    
    if strcmp(line,'<systemParameters>')
        % here, the first line is skipped
        continue
    elseif strcmp(line,'</systemParameters>') || line(1) == -1
        % this ends the file reading process when the last line is reached
        break
    end
    
    % find the indices of double quotes within the text - there will be
    % either 4 or 6 in all
    q = strfind(line,'"');
    
    % extract the parameter name and value from between the quotes
    name = line(q(1)+1:q(2)-1);
    value = line(q(3)+1:q(4)-1);
    
    % replace illegal characters with underscores
    name(name=='-') = '_';
    name(name=='/') = '_';
    
    % structure fields may not begin with a number; thus a 't' is placed
    % before any names beggining with a number. Why not a t?
    if str2num(name(1)) %#ok<ST2NM>
        name(2:end+1) = name;
        name(1) = 't';
    end
    
    if length(q) > 4
        % more than 4 quotes indicates that a 'unit' is also provided
        units = line(q(5)+1:q(6)-1);
        % place the value and unit into the structure
        sysParam = setfield(sysParam,name,'value',value);
        sysParam = setfield(sysParam,name,'unit',units);
    else
        % insert the value into the structure
        sysParam = setfield(sysParam,name,'value',value);
    end
end
fclose(fid);
end
